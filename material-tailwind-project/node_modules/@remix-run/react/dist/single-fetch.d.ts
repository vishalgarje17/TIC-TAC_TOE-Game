import * as React from "react";
import type { ActionFunctionArgs as RRActionArgs, LoaderFunctionArgs as RRLoaderArgs, unstable_DataStrategyFunction as DataStrategyFunction } from "@remix-run/router";
import type { unstable_Action, unstable_Loader, unstable_Serialize } from "@remix-run/server-runtime";
import type { DataRouteObject } from "react-router-dom";
import type { AssetsManifest, EntryContext } from "./entry";
import type { RouteModules } from "./routeModules";
type ClientLoaderArgs = RRLoaderArgs<undefined> & {
    serverLoader: <T extends unstable_Loader>() => Promise<unstable_Serialize<T>>;
};
export type ClientLoader = (args: ClientLoaderArgs) => unknown;
export declare let defineClientLoader: <T extends ClientLoader>(clientLoader: T) => T & {
    hydrate?: boolean | undefined;
};
type ClientActionArgs = RRActionArgs<undefined> & {
    serverAction: <T extends unstable_Action>() => Promise<unstable_Serialize<T>>;
};
export type ClientAction = (args: ClientActionArgs) => unknown;
export declare let defineClientAction: <T extends ClientAction>(clientAction: T) => T;
interface StreamTransferProps {
    context: EntryContext;
    identifier: number;
    reader: ReadableStreamDefaultReader<Uint8Array>;
    textDecoder: TextDecoder;
    nonce?: string;
}
export declare function StreamTransfer({ context, identifier, reader, textDecoder, nonce, }: StreamTransferProps): React.JSX.Element | null;
export declare function getSingleFetchDataStrategy(manifest: AssetsManifest, routeModules: RouteModules): DataStrategyFunction;
export declare function addRevalidationParam(manifest: AssetsManifest, routeModules: RouteModules, matchedRoutes: DataRouteObject[], loadRoutes: DataRouteObject[], url: URL): URL;
export declare function singleFetchUrl(reqUrl: URL | string): URL;
export declare function decodeViaTurboStream(body: ReadableStream<Uint8Array>, global: Window | typeof globalThis): Promise<{
    done: Promise<undefined>;
    value: unknown;
}>;
export {};
